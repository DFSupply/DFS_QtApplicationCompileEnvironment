trigger:
- main

resources:
- repo: self

name: '$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)_$(Rev:.r)'

variables:
  tag: '$(Build.BuildId)'
  version.MajorMinor: '0.1'
  version.Revision: $[counter(variables['version.MajorMinor'], 0)]
  versionNumber: '$(version.MajorMinor).$(version.Revision)'

stages:
- stage: Build
  displayName: Build/Push Container Images
  jobs:
  - job: Build_Windows_Container
    timeoutInMinutes: 1000
    displayName: Build Windows Container
    pool:
      name: Default
      demands:
      - Agent.OS -equals Windows_NT
      - Agent.OSArchitecture -equals X64
    steps:
    - task: Docker@2
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
      displayName: Build/Push the windows image
      inputs:
        command: buildAndPush
        repository: 'qt-build-env-windows'
        dockerfile: '$(Build.SourcesDirectory)/DockerFile-windows'
        containerRegistry: 'dfsbuildcontainer.azurecr.io'
        tags: |
          $(versionNumber)
    - task: Docker@2
      condition: ne(variables['Build.SourceBranch'], 'refs/heads/main')
      displayName: Build the windows image
      inputs:
        command: build
        dockerfile: '$(Build.SourcesDirectory)/DockerFile-windows'
  - job: Build_Linux_Container
    timeoutInMinutes: 400
    displayName: Build Linux Container
    pool:
      name: Default
      demands:
      - Agent.OS -equals Linux
      - Agent.OSArchitecture -equals X64
    steps:
    - task: Docker@2
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
      displayName: Build/Push the linux image
      inputs:
        command: buildAndPush
        repository: 'qt-build-env-linux'
        dockerfile: '$(Build.SourcesDirectory)/DockerFile-linux'
        containerRegistry: 'dfsbuildcontainer.azurecr.io'
        tags: |
          $(versionNumber)
    - task: Docker@2
      condition: ne(variables['Build.SourceBranch'], 'refs/heads/main')
      displayName: Build the linux image
      inputs:
        command: build
        dockerfile: '$(Build.SourcesDirectory)/DockerFile-linux'