# Compile Environment for Qt 5/6 Applications (windows)
# DF Supply, Inc.
# Scott Moore
# 2/26/2022

FROM mcr.microsoft.com/windows/servercore:ltsc2022 as imagebase

# Install chocolatey
RUN powershell -NoProfile -ExecutionPolicy Bypass -Command \
	$Env:chocolateyVersion = '0.10.15' ; \
	$Env:chocolateyUseWindowsCompression = 'false' ; \
	"[Net.ServicePointManager]::SecurityProtocol = \"tls12, tls11, tls\"; iex ((New-Object System.Net.WebClient).DownloadString('http://chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin" && \
	choco feature enable -n=allowGlobalConfirmation
    
# Install Curl
RUN choco install curl --version=7.81.0

# Install .net 4.8
RUN choco install dotnetfx

# Install MSVC 2022
RUN \
	choco install visualstudio2022buildtools --ignore-package-exit-codes=3010 && \
	choco install visualstudio2022-workload-vctools --ignore-package-exit-codes=3010 --execution-timeout=7200 --package-parameters "--allWorkloads --includeRecommended --includeOptional " && \
	choco install visualstudio2022-workload-universal --ignore-package-exit-codes=3010 --execution-timeout=7200 --package-parameters "--allWorkloads --includeRecommended --includeOptional " && \
	choco install visualstudio2022-workload-nativedesktop --ignore-package-exit-codes=3010 --execution-timeout=7200 --package-parameters "--allWorkloads --includeRecommended --includeOptional " && \
	choco install visualstudio2022-workload-universalbuildtools --ignore-package-exit-codes=3010 --execution-timeout=7200 --package-parameters "--allWorkloads --includeRecommended --includeOptional "

# Install Git
RUN choco install git
		
# Install JOM for multi-core builds
RUN choco install jom

# Install Perl
RUN choco install strawberryperl

# Install Ruby
RUN choco install ruby

# Install Python
RUN choco install python2

# Install Python3
RUN choco install python3

# Install sed
RUN choco install sed

# Install Ninja
RUN choco install ninja

# Install CMake
RUN choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

# Install LLVM
RUN choco install llvm

# Setup build directories
RUN \
	mkdir build-env && \
	mkdir b

# vcpkg and required packages (Qt6)
RUN \
	git clone https://github.com/microsoft/vcpkg && \
	cd vcpkg && \
	bootstrap-vcpkg.bat && \
	vcpkg install qt:x64-windows --x-buildtrees-root=C:\b\ && \
	vcpkg install openssl:x64-windows && \
	vcpkg install zlib:x64-windows && \
	vcpkg install libpq:x64-windows && \
	vcpkg integrate install && \
	# Cleanup to reduce image size
	RMDIR packages /S /Q && \
	RMDIR buildtrees /S /Q && \
	RMDIR downloads /S /Q && \
	RMDIR c:\b /S /Q


# Qt5
RUN \
	cd vcpkg && \
	vcpkg install qt5-base[postgresqlplugin]:x64-windows --x-buildtrees-root=c:\b\ && \
	vcpkg install qt5-webengine:x64-windows --x-buildtrees-root=c:\b\ && \
	vcpkg install qt5:x64-windows --x-buildtrees-root=c:\b\ && \
	vcpkg integrate install && \
	# Cleanup to reduce image size
	RMDIR packages /S /Q && \
	RMDIR buildtrees /S /Q && \
	RMDIR downloads /S /Q && \
	RMDIR c:\b /S /Q
	
# Bootstrapping msvc tools
SHELL ["powershell"]
RUN Install-PackageProvider NuGet -Force
RUN Install-Module -Name WintellectPowerShell -Force

ENTRYPOINT ["C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat", "&&", "powershell.exe", "-NoLogo", "-ExecutionPolicy", "Bypass"]]
